
package com.G3M4E5.Redflix88.vista;

import com.G3M4E5.Redflix88.Redflix88Application;
import com.G3M4E5.Redflix88.SpringContext;
import com.G3M4E5.Redflix88.modelos.Series;
import com.G3M4E5.Redflix88.repositorios.SeriesRepositorio;
import java.awt.Color;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
/**
 *
 * @author Roberto Londo√±o
 */
public class PanelSeries extends javax.swing.JPanel {
    
    SeriesRepositorio seriesRepositorio;
    /**
     * Creates new form PanelUsuarios
     */
    public PanelSeries() {
        Redflix88Application.runSpring();
        seriesRepositorio = SpringContext.getBean(SeriesRepositorio.class);
        initComponents();
        botonProcesar.setEnabled(false);
        botonActualizar.setEnabled(false);
        botonEliminar.setEnabled(false);
        deshabilitarCampos();
        botonProcesar.setBorder(BorderFactory.createLineBorder(new Color(0, 255, 102), 2));
        botonReset.setBorder(BorderFactory.createLineBorder(new Color(0, 255, 102), 2));        
        campoMensajes.setEditable(false);
        campoTituloRequerido.setEditable(false);
        campoEpisodiosRequerido.setEditable(false);
        campoTemporadasRequerido.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonBuscar = new javax.swing.JButton();
        Temporadas = new javax.swing.JLabel();
        botonAgregar = new javax.swing.JButton();
        campoEpisodios = new javax.swing.JTextField();
        botonActualizar = new javax.swing.JButton();
        Episodios = new javax.swing.JLabel();
        labelSeriesTitulo = new javax.swing.JLabel();
        botonEliminar = new javax.swing.JButton();
        campoTitulo = new javax.swing.JTextField();
        Titulo = new javax.swing.JLabel();
        campoMensajes = new javax.swing.JTextField();
        campoTemporadas = new javax.swing.JTextField();
        botonProcesar = new javax.swing.JButton();
        botonReset = new javax.swing.JButton();
        campoTemporadasRequerido = new javax.swing.JTextField();
        campoTituloRequerido = new javax.swing.JTextField();
        campoEpisodiosRequerido = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 0, 0));

        botonBuscar.setText("Buscar");
        botonBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        Temporadas.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        Temporadas.setForeground(new java.awt.Color(255, 255, 255));
        Temporadas.setText("Temporadas");

        botonAgregar.setText("Agregar");
        botonAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarActionPerformed(evt);
            }
        });

        campoEpisodios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoEpisodiosKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoEpisodiosKeyTyped(evt);
            }
        });

        botonActualizar.setText("Actualizar");
        botonActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        Episodios.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        Episodios.setForeground(new java.awt.Color(255, 255, 255));
        Episodios.setText("Episodios");

        labelSeriesTitulo.setFont(new java.awt.Font("Calibri Light", 1, 48)); // NOI18N
        labelSeriesTitulo.setForeground(new java.awt.Color(255, 255, 255));
        labelSeriesTitulo.setText("SERIES");

        botonEliminar.setText("Eliminar");
        botonEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        campoTitulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoTituloKeyReleased(evt);
            }
        });

        Titulo.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        Titulo.setForeground(new java.awt.Color(255, 255, 255));
        Titulo.setText("Titulo");

        campoMensajes.setBackground(new java.awt.Color(0, 0, 0));
        campoMensajes.setFont(new java.awt.Font("Calibri Light", 3, 20)); // NOI18N
        campoMensajes.setForeground(new java.awt.Color(0, 255, 102));
        campoMensajes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        campoMensajes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMensajesActionPerformed(evt);
            }
        });

        campoTemporadas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                campoTemporadasKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoTemporadasKeyTyped(evt);
            }
        });

        botonProcesar.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        botonProcesar.setText("PROCESAR");
        botonProcesar.setBorder(null);
        botonProcesar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonProcesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonProcesarActionPerformed(evt);
            }
        });

        botonReset.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        botonReset.setText("RESET");
        botonReset.setBorder(null);
        botonReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonResetActionPerformed(evt);
            }
        });

        campoTemporadasRequerido.setBackground(new java.awt.Color(0, 0, 0));
        campoTemporadasRequerido.setForeground(new java.awt.Color(255, 0, 0));
        campoTemporadasRequerido.setBorder(null);
        campoTemporadasRequerido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTemporadasRequeridoActionPerformed(evt);
            }
        });

        campoTituloRequerido.setBackground(new java.awt.Color(0, 0, 0));
        campoTituloRequerido.setForeground(new java.awt.Color(255, 0, 0));
        campoTituloRequerido.setBorder(null);
        campoTituloRequerido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTituloRequeridoActionPerformed(evt);
            }
        });

        campoEpisodiosRequerido.setBackground(new java.awt.Color(0, 0, 0));
        campoEpisodiosRequerido.setForeground(new java.awt.Color(255, 0, 0));
        campoEpisodiosRequerido.setBorder(null);
        campoEpisodiosRequerido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoEpisodiosRequeridoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Titulo)
                            .addComponent(Episodios)
                            .addComponent(Temporadas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoTemporadas, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(campoTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(campoEpisodios, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(campoTituloRequerido, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(campoTemporadasRequerido)
                            .addComponent(campoEpisodiosRequerido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(botonReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonAgregar)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(botonBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(botonActualizar))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelSeriesTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(62, 62, 62)
                        .addComponent(botonEliminar)))
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(campoMensajes)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(labelSeriesTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonAgregar)
                    .addComponent(botonActualizar)
                    .addComponent(botonEliminar)
                    .addComponent(botonBuscar))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Titulo)
                                    .addComponent(campoTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campoTituloRequerido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botonProcesar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Temporadas)
                            .addComponent(campoTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Episodios)
                            .addComponent(campoEpisodios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(campoTemporadasRequerido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(campoEpisodiosRequerido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addComponent(campoMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void borrarCampos(){ //textfield nuevamente en blanco
        campoTitulo.setText("");
        campoTemporadas.setText("");
        campoEpisodios.setText("");
    }
    
    private void deshabilitarCampos(){//NO permite escribir en los texfield
        campoTitulo.setEnabled(false);
        campoTemporadas.setEnabled(false);
        campoEpisodios.setEnabled(false);
    }    
     /*
    *Habilita los campas necesario para buscar
    *cambia color label Alias
    */
    private void deshabilitarCamposParaBuscar(){
        campoTemporadas.setEnabled(false);
        campoEpisodios.setEnabled(false);        
        botonActualizar.setEnabled(false);
        botonEliminar.setEnabled(false);
        botonAgregar.setEnabled(false);
        Titulo.setForeground(new Color(0, 255, 102));
        botonProcesar.setEnabled(true);
        campoTitulo.setEnabled(true);
    }    
    private void habilitarCampos(){//permite escribir en los texfield
        campoTitulo.setEnabled(true);
        campoTemporadas.setEnabled(true);
        campoEpisodios.setEnabled(true);        
    }
    /*
    *Habilita los campos y cambia a color
    *inicial los label.
    *Usada para despues de buscar
    */
    private void habilitarCamposyBotones(){
        campoTemporadas.setEnabled(true);
        campoEpisodios.setEnabled(true);        
        botonActualizar.setEnabled(true);
        botonEliminar.setEnabled(true);
        botonAgregar.setEnabled(true);
        botonBuscar.setEnabled(true);
        Titulo.setForeground(Color.WHITE);
        Temporadas.setForeground(Color.WHITE);
        Episodios.setForeground(Color.WHITE);        
    }
    
    //activa botones necesarios para actualizar
    private void preparacionParaActualizar(){
        botonActualizar.setEnabled(true);
        botonEliminar.setEnabled(false);
        botonBuscar.setEnabled(false);
        botonAgregar.setEnabled(false);
        botonProcesar.setEnabled(true);
        Titulo.setForeground(new Color(0, 255, 102));
    }
    
    //label cambian de color sugiriendo los campos a llenar
    private void preparacionParaAgregar(){
        botonActualizar.setEnabled(false);
        botonEliminar.setEnabled(false);
        botonBuscar.setEnabled(false);
        botonAgregar.setEnabled(true);        
        Titulo.setForeground(new Color(0, 255, 102));
        Temporadas.setForeground(new Color(0, 255, 102));
        Episodios.setForeground(new Color(0, 255, 102));        
    }
    
    private void campoMensajesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMensajesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoMensajesActionPerformed

    private void botonProcesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonProcesarActionPerformed
        campoTituloRequerido.setText("");
        campoTemporadasRequerido.setText("");
        campoEpisodiosRequerido.setText("");
        //BUSCA segun keymaster(alias)
        if(botonBuscar.isEnabled()) {
            habilitarCamposyBotones();
            String serie = campoTitulo.getText();
            Optional<Series> resultado = seriesRepositorio.findById(serie);
            if (resultado.isPresent()) {
                Series seriesEncontrado = resultado.get();
                int e = seriesEncontrado.getN_temporadas();
                campoTemporadas.setText(Integer.toString(e));
                int a = seriesEncontrado.getN_episodios();
                campoEpisodios.setText(Integer.toString(a));
                botonProcesar.setEnabled(false);                
                campoMensajes.setText("Serie disponible: " + campoTitulo.getText() 
                                    + " consta de " + campoEpisodios.getText() + " episodios en "
                                    + campoTemporadas.getText() + " temporadas");
                System.out.println("Serie disponible: " + campoTitulo.getText() 
                                    + " consta de " + campoEpisodios.getText() + " episodios en "
                                    + campoTemporadas.getText() + " temporadas");
                deshabilitarCamposParaBuscar();
                botonProcesar.setEnabled(true);
                botonActualizar.setEnabled(true);
                botonEliminar.setEnabled(true);
            } else {
                botonProcesar.setEnabled(true);
                campoMensajes.setText("La serie que busca no fue encontrada");
                System.out.println("La serie que busca no fue encontrada");
                deshabilitarCamposParaBuscar();
            }
            //AGREGA serie nuevo
        }else if (botonAgregar.isEnabled()) {
            habilitarCamposyBotones();
            String serie = campoTitulo.getText();
            Optional<Series> resultado = seriesRepositorio.findById(serie);
            if(resultado.isEmpty()) { //Devuelve true si la serie no esta en la tabla
                String titulo = campoTitulo.getText();
                int  temporadas = Integer.parseInt(campoTemporadas.getText());
                int episodios = Integer.parseInt(campoEpisodios.getText());
                Series nuevo = new Series(titulo, temporadas, episodios);
                seriesRepositorio.save(nuevo);
                botonProcesar.setEnabled(false);
                campoMensajes.setText("Se registr√≥ correctamente la serie " + titulo);
                System.out.println("Se registr√≥ correctamente la serie " + titulo);
            }else {
                campoMensajes.setText("Lo sentimos la serie ya esta registrada");
                System.out.println("Lo sentimos la serie ya esta registrada");
            }
            

            //Actualiza usuario. Solo se puede usar despues de buscar
        }else if(botonActualizar.isEnabled()){
            String titulo = campoTitulo.getText();
            Optional<Series> resultado = seriesRepositorio.findById(titulo);
            if (resultado.isPresent()) {
                Series usuarioEncontrado = resultado.get();
                usuarioEncontrado.setN_temporadas(Integer.parseInt(campoTemporadas.getText()));
                usuarioEncontrado.setN_episodios(Integer.parseInt(campoEpisodios.getText()));                
                seriesRepositorio.save(usuarioEncontrado);
                botonActualizar.setEnabled(false);
                botonProcesar.setEnabled(false);
                campoMensajes.setText("Se actualiz√≥ correctamente el la serie " + campoTitulo.getText());
                System.out.println("Se actualiz√≥ correctamente el la serie " + campoTitulo.getText());
            }else {
                botonActualizar.setEnabled(true);
                campoMensajes.setText("Pelicula no encontrada");
                System.out.println("Pelicula no encontrada");

            }//Elimina usuario. Solo se puede usar despues de buscar
        }else if(botonEliminar.isEnabled()){

            String titulo = campoTitulo.getText();
            try{
                seriesRepositorio.deleteById(titulo);
                campoMensajes.setText("Se elimin√≥ exitosamente la serie " + titulo);
                System.out.println("Se elimin√≥ exitosamente la serie " + titulo);
                botonProcesar.setEnabled(false);
                borrarCampos();
                botonEliminar.setEnabled(false);
        }
            catch(Exception e){
                campoMensajes.setText("Ocurrio un error al eliminar");
                System.out.println("Ocurrio un error al eliminar");
        }
        }
    }//GEN-LAST:event_botonProcesarActionPerformed

    private void botonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonResetActionPerformed
        borrarCampos();
        campoMensajes.setText("");
        habilitarCamposyBotones();
        deshabilitarCampos();
        botonActualizar.setEnabled(false);
        botonEliminar.setEnabled(false);
        botonProcesar.setEnabled(false);
        campoTituloRequerido.setText("");
        campoTemporadasRequerido.setText("");
        campoEpisodiosRequerido.setText("");
    }//GEN-LAST:event_botonResetActionPerformed

    private void botonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarActionPerformed
        borrarCampos();
        campoMensajes.setText("");
        preparacionParaAgregar();
        habilitarCampos();
        campoTituloRequerido.setText("*Requerido");
        campoTemporadasRequerido.setText("*Requerido (Solo acepta n√∫meros)");
        campoEpisodiosRequerido.setText("*Requerido (Solo acepta n√∫meros)");
    }//GEN-LAST:event_botonAgregarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        borrarCampos();
        campoMensajes.setText("");
        deshabilitarCamposParaBuscar();        
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        preparacionParaActualizar();
        habilitarCamposyBotones();
        botonBuscar.setEnabled(false);
        botonAgregar.setEnabled(false);
        botonEliminar.setEnabled(false);
        campoMensajes.setText("");
        campoTitulo.setEnabled(false);
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        Titulo.setForeground(Color.RED);       
        Temporadas.setForeground(Color.RED);
        Episodios.setForeground(Color.RED);
        botonBuscar.setEnabled(false);
        botonAgregar.setEnabled(false);
        botonActualizar.setEnabled(false);
        campoMensajes.setText("");
        habilitarCampos();
        campoTitulo.setEnabled(false);
    }//GEN-LAST:event_botonEliminarActionPerformed
    //VALIDACIONES
    private void campoTemporadasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoTemporadasKeyTyped
        char teclaPulsada = evt.getKeyChar();
        if(teclaPulsada<'0' || teclaPulsada>'9'){
            evt.consume();            
        }        
    }//GEN-LAST:event_campoTemporadasKeyTyped
    private void campoTemporadasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoTemporadasKeyReleased
        Pattern pat = Pattern.compile("\\d");
        Matcher mat = pat.matcher(campoTemporadas.getText());
        if(mat.find()){
            campoTemporadasRequerido.setText("");
        }
        else{
            campoTemporadasRequerido.setText("*Requerido (Solo acepta n√∫meros)");
        }    
        if(campoTemporadasRequerido.getText().isEmpty()
                &&campoTituloRequerido.getText().isEmpty()
                &&campoEpisodiosRequerido.getText().isEmpty()){
            botonProcesar.setEnabled(true);
        }else{
            botonProcesar.setEnabled(false);
        }
    }//GEN-LAST:event_campoTemporadasKeyReleased

    private void campoTemporadasRequeridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTemporadasRequeridoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoTemporadasRequeridoActionPerformed

    private void campoTituloRequeridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTituloRequeridoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoTituloRequeridoActionPerformed

    private void campoEpisodiosRequeridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoEpisodiosRequeridoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoEpisodiosRequeridoActionPerformed

    private void campoTituloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoTituloKeyReleased
        Pattern pat = Pattern.compile("\\w");
        Matcher mat = pat.matcher(campoTitulo.getText());
        if(mat.find()){
            campoTituloRequerido.setText("");
        }
        else{
            campoTituloRequerido.setText("*Requerido");
        }
        if(campoTemporadasRequerido.getText().isEmpty()
                &&campoTituloRequerido.getText().isEmpty()
                &&campoEpisodiosRequerido.getText().isEmpty()){
            botonProcesar.setEnabled(true);
        }else{
            botonProcesar.setEnabled(false);
        }
    }//GEN-LAST:event_campoTituloKeyReleased

    private void campoEpisodiosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoEpisodiosKeyReleased
        Pattern pat = Pattern.compile("\\d");
        Matcher mat = pat.matcher(campoEpisodios.getText());
        if(mat.find()){
            campoEpisodiosRequerido.setText("");
        }
        else{
            campoEpisodiosRequerido.setText("*Requerido (Solo acepta n√∫meros)");
        }
        if(campoTemporadasRequerido.getText().isEmpty()
                &&campoTituloRequerido.getText().isEmpty()
                &&campoEpisodiosRequerido.getText().isEmpty()){
            botonProcesar.setEnabled(true);
        }else{
            botonProcesar.setEnabled(false);
        }
    }//GEN-LAST:event_campoEpisodiosKeyReleased

    private void campoEpisodiosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoEpisodiosKeyTyped
        char teclaPulsada = evt.getKeyChar();
        if(teclaPulsada<'0' || teclaPulsada>'9'){
            evt.consume();            
        }
    }//GEN-LAST:event_campoEpisodiosKeyTyped
   
        
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Episodios;
    private javax.swing.JLabel Temporadas;
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonAgregar;
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonProcesar;
    private javax.swing.JButton botonReset;
    private javax.swing.JTextField campoEpisodios;
    private javax.swing.JTextField campoEpisodiosRequerido;
    private javax.swing.JTextField campoMensajes;
    private javax.swing.JTextField campoTemporadas;
    private javax.swing.JTextField campoTemporadasRequerido;
    private javax.swing.JTextField campoTitulo;
    private javax.swing.JTextField campoTituloRequerido;
    private javax.swing.JLabel labelSeriesTitulo;
    // End of variables declaration//GEN-END:variables
}
